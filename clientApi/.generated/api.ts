/* tslint:disable */
/* eslint-disable */
/**
 *
 * The tasks API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface AddCartItemDto
 */
export interface AddCartItemDto {
  /**
   *
   * @type {string}
   * @memberof AddCartItemDto
   */
  size: AddCartItemDtoSizeEnum;
  /**
   *
   * @type {number}
   * @memberof AddCartItemDto
   */
  productId: number;
}

export const AddCartItemDtoSizeEnum = {
  Small: "SMALL",
  Medium: "MEDIUM",
  Large: "LARGE",
} as const;

export type AddCartItemDtoSizeEnum =
  (typeof AddCartItemDtoSizeEnum)[keyof typeof AddCartItemDtoSizeEnum];

/**
 *
 * @export
 * @interface AddProductDto
 */
export interface AddProductDto {
  /**
   *
   * @type {string}
   * @memberof AddProductDto
   */
  category: AddProductDtoCategoryEnum;
  /**
   *
   * @type {string}
   * @memberof AddProductDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof AddProductDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof AddProductDto
   */
  color: string;
  /**
   *
   * @type {string}
   * @memberof AddProductDto
   */
  material: string;
  /**
   *
   * @type {string}
   * @memberof AddProductDto
   */
  brand: string;
}

export const AddProductDtoCategoryEnum = {
  Men: "MEN",
  Women: "WOMEN",
  Kids: "KIDS",
  Summer: "SUMMER",
  Winter: "WINTER",
} as const;

export type AddProductDtoCategoryEnum =
  (typeof AddProductDtoCategoryEnum)[keyof typeof AddProductDtoCategoryEnum];

/**
 *
 * @export
 * @interface AddProductResponseDto
 */
export interface AddProductResponseDto {
  /**
   *
   * @type {string}
   * @memberof AddProductResponseDto
   */
  category: AddProductResponseDtoCategoryEnum;
  /**
   *
   * @type {string}
   * @memberof AddProductResponseDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof AddProductResponseDto
   */
  brand: string;
  /**
   *
   * @type {string}
   * @memberof AddProductResponseDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof AddProductResponseDto
   */
  color: string;
  /**
   *
   * @type {string}
   * @memberof AddProductResponseDto
   */
  material: string;
  /**
   *
   * @type {number}
   * @memberof AddProductResponseDto
   */
  id: number;
}

export const AddProductResponseDtoCategoryEnum = {
  Men: "MEN",
  Women: "WOMEN",
  Kids: "KIDS",
  Summer: "SUMMER",
  Winter: "WINTER",
} as const;

export type AddProductResponseDtoCategoryEnum =
  (typeof AddProductResponseDtoCategoryEnum)[keyof typeof AddProductResponseDtoCategoryEnum];

/**
 *
 * @export
 * @interface AuthDto
 */
export interface AuthDto {
  /**
   *
   * @type {string}
   * @memberof AuthDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AuthDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface GetAllProductsResponseDto
 */
export interface GetAllProductsResponseDto {
  /**
   *
   * @type {Array<GetProductByIdResponseDto>}
   * @memberof GetAllProductsResponseDto
   */
  data: Array<GetProductByIdResponseDto>;
}
/**
 *
 * @export
 * @interface GetProductByIdResponseDto
 */
export interface GetProductByIdResponseDto {
  /**
   *
   * @type {string}
   * @memberof GetProductByIdResponseDto
   */
  category: GetProductByIdResponseDtoCategoryEnum;
  /**
   *
   * @type {Array<InventoryItemResponseDto>}
   * @memberof GetProductByIdResponseDto
   */
  inventory: Array<InventoryItemResponseDto>;
  /**
   *
   * @type {number}
   * @memberof GetProductByIdResponseDto
   */
  baseProductId: number;
  /**
   *
   * @type {string}
   * @memberof GetProductByIdResponseDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof GetProductByIdResponseDto
   */
  brand: string;
  /**
   *
   * @type {string}
   * @memberof GetProductByIdResponseDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof GetProductByIdResponseDto
   */
  color: string;
  /**
   *
   * @type {string}
   * @memberof GetProductByIdResponseDto
   */
  material: string;
  /**
   *
   * @type {number}
   * @memberof GetProductByIdResponseDto
   */
  id: number;
}

export const GetProductByIdResponseDtoCategoryEnum = {
  Men: "MEN",
  Women: "WOMEN",
  Kids: "KIDS",
  Summer: "SUMMER",
  Winter: "WINTER",
} as const;

export type GetProductByIdResponseDtoCategoryEnum =
  (typeof GetProductByIdResponseDtoCategoryEnum)[keyof typeof GetProductByIdResponseDtoCategoryEnum];

/**
 *
 * @export
 * @interface InventoryItemResponseDto
 */
export interface InventoryItemResponseDto {
  /**
   *
   * @type {string}
   * @memberof InventoryItemResponseDto
   */
  size: InventoryItemResponseDtoSizeEnum;
  /**
   *
   * @type {number}
   * @memberof InventoryItemResponseDto
   */
  productId: number;
  /**
   *
   * @type {number}
   * @memberof InventoryItemResponseDto
   */
  price: number;
  /**
   *
   * @type {number}
   * @memberof InventoryItemResponseDto
   */
  quantity: number;
  /**
   *
   * @type {number}
   * @memberof InventoryItemResponseDto
   */
  discount: number;
}

export const InventoryItemResponseDtoSizeEnum = {
  Small: "SMALL",
  Medium: "MEDIUM",
  Large: "LARGE",
} as const;

export type InventoryItemResponseDtoSizeEnum =
  (typeof InventoryItemResponseDtoSizeEnum)[keyof typeof InventoryItemResponseDtoSizeEnum];

/**
 *
 * @export
 * @interface NewOrderFromCartDto
 */
export interface NewOrderFromCartDto {
  /**
   *
   * @type {string}
   * @memberof NewOrderFromCartDto
   */
  paymentType: string;
}
/**
 *
 * @export
 * @interface SendVerificationEmailDto
 */
export interface SendVerificationEmailDto {
  /**
   *
   * @type {string}
   * @memberof SendVerificationEmailDto
   */
  email: string;
}
/**
 *
 * @export
 * @interface SignupDto
 */
export interface SignupDto {
  /**
   *
   * @type {string}
   * @memberof SignupDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SignupDto
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof SignupDto
   */
  email: string;
}
/**
 *
 * @export
 * @interface UpdateInventoryDto
 */
export interface UpdateInventoryDto {
  /**
   *
   * @type {string}
   * @memberof UpdateInventoryDto
   */
  size: UpdateInventoryDtoSizeEnum;
  /**
   *
   * @type {number}
   * @memberof UpdateInventoryDto
   */
  productId: number;
  /**
   *
   * @type {number}
   * @memberof UpdateInventoryDto
   */
  quantity: number;
  /**
   *
   * @type {number}
   * @memberof UpdateInventoryDto
   */
  price: number;
  /**
   *
   * @type {number}
   * @memberof UpdateInventoryDto
   */
  discount: number;
}

export const UpdateInventoryDtoSizeEnum = {
  Small: "SMALL",
  Medium: "MEDIUM",
  Large: "LARGE",
} as const;

export type UpdateInventoryDtoSizeEnum =
  (typeof UpdateInventoryDtoSizeEnum)[keyof typeof UpdateInventoryDtoSizeEnum];

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {SendVerificationEmailDto} sendVerificationEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSendVerificationEmail: async (
      sendVerificationEmailDto: SendVerificationEmailDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'sendVerificationEmailDto' is not null or undefined
      assertParamExists(
        "authControllerSendVerificationEmail",
        "sendVerificationEmailDto",
        sendVerificationEmailDto
      );
      const localVarPath = `/auth/sendVerificationEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sendVerificationEmailDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AuthDto} authDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignin: async (
      authDto: AuthDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authDto' is not null or undefined
      assertParamExists("authControllerSignin", "authDto", authDto);
      const localVarPath = `/auth/signin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignout: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/signout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SignupDto} signupDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignup: async (
      signupDto: SignupDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signupDto' is not null or undefined
      assertParamExists("authControllerSignup", "signupDto", signupDto);
      const localVarPath = `/auth/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signupDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} email
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmail: async (
      email: string,
      token: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists("authControllerVerifyEmail", "email", email);
      // verify required parameter 'token' is not null or undefined
      assertParamExists("authControllerVerifyEmail", "token", token);
      const localVarPath = `/auth/verifyEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AddCartItemDto} addCartItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddToCart: async (
      addCartItemDto: AddCartItemDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'addCartItemDto' is not null or undefined
      assertParamExists(
        "cartControllerAddToCart",
        "addCartItemDto",
        addCartItemDto
      );
      const localVarPath = `/cart/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addCartItemDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerClearCart: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cart/clear`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetUserCartItems: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerRemoveFromCart: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("cartControllerRemoveFromCart", "id", id);
      const localVarPath = `/cart/remove/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckControllerHealthCheck: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/health-check`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} productId
     * @param {string} size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inventoryControllerDeleteProductSizeInventory: async (
      productId: number,
      size: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists(
        "inventoryControllerDeleteProductSizeInventory",
        "productId",
        productId
      );
      // verify required parameter 'size' is not null or undefined
      assertParamExists(
        "inventoryControllerDeleteProductSizeInventory",
        "size",
        size
      );
      const localVarPath = `/inventory/{productId}/{size}`
        .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
        .replace(`{${"size"}}`, encodeURIComponent(String(size)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} productId
     * @param {'SMALL' | 'MEDIUM' | 'LARGE'} size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inventoryControllerGetProductSizeInventory: async (
      productId: number,
      size: "SMALL" | "MEDIUM" | "LARGE",
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productId' is not null or undefined
      assertParamExists(
        "inventoryControllerGetProductSizeInventory",
        "productId",
        productId
      );
      // verify required parameter 'size' is not null or undefined
      assertParamExists(
        "inventoryControllerGetProductSizeInventory",
        "size",
        size
      );
      const localVarPath = `/inventory/{productId}/{size}`
        .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
        .replace(`{${"size"}}`, encodeURIComponent(String(size)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateInventoryDto} updateInventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inventoryControllerUpdateInventory: async (
      updateInventoryDto: UpdateInventoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateInventoryDto' is not null or undefined
      assertParamExists(
        "inventoryControllerUpdateInventory",
        "updateInventoryDto",
        updateInventoryDto
      );
      const localVarPath = `/inventory/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateInventoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {NewOrderFromCartDto} newOrderFromCartDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerNewOrder: async (
      newOrderFromCartDto: NewOrderFromCartDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'newOrderFromCartDto' is not null or undefined
      assertParamExists(
        "orderControllerNewOrder",
        "newOrderFromCartDto",
        newOrderFromCartDto
      );
      const localVarPath = `/orders/new`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newOrderFromCartDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AddProductDto} addProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productControllerAddProduct: async (
      addProductDto: AddProductDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'addProductDto' is not null or undefined
      assertParamExists(
        "productControllerAddProduct",
        "addProductDto",
        addProductDto
      );
      const localVarPath = `/products/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addProductDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productControllerGetAll: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/products/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productControllerGetFromId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("productControllerGetFromId", "id", id);
      const localVarPath = `/products/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetMe: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetUserOrders: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/orders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {SendVerificationEmailDto} sendVerificationEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerSendVerificationEmail(
      sendVerificationEmailDto: SendVerificationEmailDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerSendVerificationEmail(
          sendVerificationEmailDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AuthDto} authDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerSignin(
      authDto: AuthDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerSignin(authDto, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerSignout(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerSignout(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {SignupDto} signupDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerSignup(
      signupDto: SignupDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerSignup(
          signupDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} email
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerVerifyEmail(
      email: string,
      token: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerVerifyEmail(
          email,
          token,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AddCartItemDto} addCartItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cartControllerAddToCart(
      addCartItemDto: AddCartItemDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cartControllerAddToCart(
          addCartItemDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cartControllerClearCart(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cartControllerClearCart(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cartControllerGetUserCartItems(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cartControllerGetUserCartItems(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cartControllerRemoveFromCart(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cartControllerRemoveFromCart(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthCheckControllerHealthCheck(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.healthCheckControllerHealthCheck(
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} productId
     * @param {string} size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inventoryControllerDeleteProductSizeInventory(
      productId: number,
      size: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.inventoryControllerDeleteProductSizeInventory(
          productId,
          size,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} productId
     * @param {'SMALL' | 'MEDIUM' | 'LARGE'} size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inventoryControllerGetProductSizeInventory(
      productId: number,
      size: "SMALL" | "MEDIUM" | "LARGE",
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.inventoryControllerGetProductSizeInventory(
          productId,
          size,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {UpdateInventoryDto} updateInventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inventoryControllerUpdateInventory(
      updateInventoryDto: UpdateInventoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.inventoryControllerUpdateInventory(
          updateInventoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {NewOrderFromCartDto} newOrderFromCartDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerNewOrder(
      newOrderFromCartDto: NewOrderFromCartDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.orderControllerNewOrder(
          newOrderFromCartDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AddProductDto} addProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productControllerAddProduct(
      addProductDto: AddProductDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AddProductResponseDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productControllerAddProduct(
          addProductDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productControllerGetAll(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetAllProductsResponseDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productControllerGetAll(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async productControllerGetFromId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetProductByIdResponseDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.productControllerGetFromId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetMe(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerGetMe(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetUserOrders(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerGetUserOrders(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {SendVerificationEmailDto} sendVerificationEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSendVerificationEmail(
      sendVerificationEmailDto: SendVerificationEmailDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .authControllerSendVerificationEmail(sendVerificationEmailDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthDto} authDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignin(
      authDto: AuthDto,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .authControllerSignin(authDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignout(options?: any): AxiosPromise<void> {
      return localVarFp
        .authControllerSignout(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SignupDto} signupDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignup(
      signupDto: SignupDto,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .authControllerSignup(signupDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} email
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmail(
      email: string,
      token: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .authControllerVerifyEmail(email, token, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AddCartItemDto} addCartItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddToCart(
      addCartItemDto: AddCartItemDto,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .cartControllerAddToCart(addCartItemDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerClearCart(options?: any): AxiosPromise<void> {
      return localVarFp
        .cartControllerClearCart(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetUserCartItems(options?: any): AxiosPromise<Array<object>> {
      return localVarFp
        .cartControllerGetUserCartItems(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerRemoveFromCart(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .cartControllerRemoveFromCart(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckControllerHealthCheck(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .healthCheckControllerHealthCheck(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} productId
     * @param {string} size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inventoryControllerDeleteProductSizeInventory(
      productId: number,
      size: string,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .inventoryControllerDeleteProductSizeInventory(productId, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} productId
     * @param {'SMALL' | 'MEDIUM' | 'LARGE'} size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inventoryControllerGetProductSizeInventory(
      productId: number,
      size: "SMALL" | "MEDIUM" | "LARGE",
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .inventoryControllerGetProductSizeInventory(productId, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateInventoryDto} updateInventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inventoryControllerUpdateInventory(
      updateInventoryDto: UpdateInventoryDto,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .inventoryControllerUpdateInventory(updateInventoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {NewOrderFromCartDto} newOrderFromCartDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerNewOrder(
      newOrderFromCartDto: NewOrderFromCartDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .orderControllerNewOrder(newOrderFromCartDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AddProductDto} addProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productControllerAddProduct(
      addProductDto: AddProductDto,
      options?: any
    ): AxiosPromise<AddProductResponseDto> {
      return localVarFp
        .productControllerAddProduct(addProductDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productControllerGetAll(
      options?: any
    ): AxiosPromise<GetAllProductsResponseDto> {
      return localVarFp
        .productControllerGetAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    productControllerGetFromId(
      id: number,
      options?: any
    ): AxiosPromise<GetProductByIdResponseDto> {
      return localVarFp
        .productControllerGetFromId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetMe(options?: any): AxiosPromise<object> {
      return localVarFp
        .userControllerGetMe(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetUserOrders(options?: any): AxiosPromise<Array<object>> {
      return localVarFp
        .userControllerGetUserOrders(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {SendVerificationEmailDto} sendVerificationEmailDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authControllerSendVerificationEmail(
    sendVerificationEmailDto: SendVerificationEmailDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .authControllerSendVerificationEmail(sendVerificationEmailDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthDto} authDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authControllerSignin(authDto: AuthDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .authControllerSignin(authDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authControllerSignout(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .authControllerSignout(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SignupDto} signupDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authControllerSignup(
    signupDto: SignupDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .authControllerSignup(signupDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} email
   * @param {string} token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public authControllerVerifyEmail(
    email: string,
    token: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .authControllerVerifyEmail(email, token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AddCartItemDto} addCartItemDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public cartControllerAddToCart(
    addCartItemDto: AddCartItemDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .cartControllerAddToCart(addCartItemDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public cartControllerClearCart(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .cartControllerClearCart(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public cartControllerGetUserCartItems(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .cartControllerGetUserCartItems(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public cartControllerRemoveFromCart(
    id: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .cartControllerRemoveFromCart(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthCheckControllerHealthCheck(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthCheckControllerHealthCheck(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} productId
   * @param {string} size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public inventoryControllerDeleteProductSizeInventory(
    productId: number,
    size: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .inventoryControllerDeleteProductSizeInventory(productId, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} productId
   * @param {'SMALL' | 'MEDIUM' | 'LARGE'} size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public inventoryControllerGetProductSizeInventory(
    productId: number,
    size: "SMALL" | "MEDIUM" | "LARGE",
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .inventoryControllerGetProductSizeInventory(productId, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateInventoryDto} updateInventoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public inventoryControllerUpdateInventory(
    updateInventoryDto: UpdateInventoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .inventoryControllerUpdateInventory(updateInventoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {NewOrderFromCartDto} newOrderFromCartDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerNewOrder(
    newOrderFromCartDto: NewOrderFromCartDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .orderControllerNewOrder(newOrderFromCartDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AddProductDto} addProductDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public productControllerAddProduct(
    addProductDto: AddProductDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .productControllerAddProduct(addProductDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public productControllerGetAll(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .productControllerGetAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public productControllerGetFromId(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .productControllerGetFromId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public userControllerGetMe(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .userControllerGetMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public userControllerGetUserOrders(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .userControllerGetUserOrders(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
